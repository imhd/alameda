// Code generated by protoc-gen-go. DO NOT EDIT.
// source: alameda_api/v1alpha1/datahub/pod_assignment.proto

package containers_ai_alameda_v1alpha1_datahub

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// *
// Represents the priority of a node
type NodePriority struct {
	Nodes                []string `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodePriority) Reset()         { *m = NodePriority{} }
func (m *NodePriority) String() string { return proto.CompactTextString(m) }
func (*NodePriority) ProtoMessage()    {}
func (*NodePriority) Descriptor() ([]byte, []int) {
	return fileDescriptor_pod_assignment_9ea0430d197b439a, []int{0}
}
func (m *NodePriority) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NodePriority.Unmarshal(m, b)
}
func (m *NodePriority) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NodePriority.Marshal(b, m, deterministic)
}
func (dst *NodePriority) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodePriority.Merge(dst, src)
}
func (m *NodePriority) XXX_Size() int {
	return xxx_messageInfo_NodePriority.Size(m)
}
func (m *NodePriority) XXX_DiscardUnknown() {
	xxx_messageInfo_NodePriority.DiscardUnknown(m)
}

var xxx_messageInfo_NodePriority proto.InternalMessageInfo

func (m *NodePriority) GetNodes() []string {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type Selector struct {
	Selector             map[string]string `protobuf:"bytes,1,rep,name=selector,proto3" json:"selector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Selector) Reset()         { *m = Selector{} }
func (m *Selector) String() string { return proto.CompactTextString(m) }
func (*Selector) ProtoMessage()    {}
func (*Selector) Descriptor() ([]byte, []int) {
	return fileDescriptor_pod_assignment_9ea0430d197b439a, []int{1}
}
func (m *Selector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Selector.Unmarshal(m, b)
}
func (m *Selector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Selector.Marshal(b, m, deterministic)
}
func (dst *Selector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Selector.Merge(dst, src)
}
func (m *Selector) XXX_Size() int {
	return xxx_messageInfo_Selector.Size(m)
}
func (m *Selector) XXX_DiscardUnknown() {
	xxx_messageInfo_Selector.DiscardUnknown(m)
}

var xxx_messageInfo_Selector proto.InternalMessageInfo

func (m *Selector) GetSelector() map[string]string {
	if m != nil {
		return m.Selector
	}
	return nil
}

// *
// Represents a recommended pod-to-node assignment (i.e. pod placement)
//
type AssignPodPolicy struct {
	Time *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	// Types that are valid to be assigned to Policy:
	//	*AssignPodPolicy_NodePriority
	//	*AssignPodPolicy_NodeSelector
	//	*AssignPodPolicy_NodeName
	Policy               isAssignPodPolicy_Policy `protobuf_oneof:"policy"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *AssignPodPolicy) Reset()         { *m = AssignPodPolicy{} }
func (m *AssignPodPolicy) String() string { return proto.CompactTextString(m) }
func (*AssignPodPolicy) ProtoMessage()    {}
func (*AssignPodPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_pod_assignment_9ea0430d197b439a, []int{2}
}
func (m *AssignPodPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AssignPodPolicy.Unmarshal(m, b)
}
func (m *AssignPodPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AssignPodPolicy.Marshal(b, m, deterministic)
}
func (dst *AssignPodPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssignPodPolicy.Merge(dst, src)
}
func (m *AssignPodPolicy) XXX_Size() int {
	return xxx_messageInfo_AssignPodPolicy.Size(m)
}
func (m *AssignPodPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_AssignPodPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_AssignPodPolicy proto.InternalMessageInfo

func (m *AssignPodPolicy) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type isAssignPodPolicy_Policy interface {
	isAssignPodPolicy_Policy()
}

type AssignPodPolicy_NodePriority struct {
	NodePriority *NodePriority `protobuf:"bytes,2,opt,name=node_priority,json=nodePriority,proto3,oneof"`
}

type AssignPodPolicy_NodeSelector struct {
	NodeSelector *Selector `protobuf:"bytes,3,opt,name=node_selector,json=nodeSelector,proto3,oneof"`
}

type AssignPodPolicy_NodeName struct {
	NodeName string `protobuf:"bytes,4,opt,name=node_name,json=nodeName,proto3,oneof"`
}

func (*AssignPodPolicy_NodePriority) isAssignPodPolicy_Policy() {}

func (*AssignPodPolicy_NodeSelector) isAssignPodPolicy_Policy() {}

func (*AssignPodPolicy_NodeName) isAssignPodPolicy_Policy() {}

func (m *AssignPodPolicy) GetPolicy() isAssignPodPolicy_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *AssignPodPolicy) GetNodePriority() *NodePriority {
	if x, ok := m.GetPolicy().(*AssignPodPolicy_NodePriority); ok {
		return x.NodePriority
	}
	return nil
}

func (m *AssignPodPolicy) GetNodeSelector() *Selector {
	if x, ok := m.GetPolicy().(*AssignPodPolicy_NodeSelector); ok {
		return x.NodeSelector
	}
	return nil
}

func (m *AssignPodPolicy) GetNodeName() string {
	if x, ok := m.GetPolicy().(*AssignPodPolicy_NodeName); ok {
		return x.NodeName
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*AssignPodPolicy) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _AssignPodPolicy_OneofMarshaler, _AssignPodPolicy_OneofUnmarshaler, _AssignPodPolicy_OneofSizer, []interface{}{
		(*AssignPodPolicy_NodePriority)(nil),
		(*AssignPodPolicy_NodeSelector)(nil),
		(*AssignPodPolicy_NodeName)(nil),
	}
}

func _AssignPodPolicy_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*AssignPodPolicy)
	// policy
	switch x := m.Policy.(type) {
	case *AssignPodPolicy_NodePriority:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NodePriority); err != nil {
			return err
		}
	case *AssignPodPolicy_NodeSelector:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NodeSelector); err != nil {
			return err
		}
	case *AssignPodPolicy_NodeName:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.NodeName)
	case nil:
	default:
		return fmt.Errorf("AssignPodPolicy.Policy has unexpected type %T", x)
	}
	return nil
}

func _AssignPodPolicy_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*AssignPodPolicy)
	switch tag {
	case 2: // policy.node_priority
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NodePriority)
		err := b.DecodeMessage(msg)
		m.Policy = &AssignPodPolicy_NodePriority{msg}
		return true, err
	case 3: // policy.node_selector
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Selector)
		err := b.DecodeMessage(msg)
		m.Policy = &AssignPodPolicy_NodeSelector{msg}
		return true, err
	case 4: // policy.node_name
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Policy = &AssignPodPolicy_NodeName{x}
		return true, err
	default:
		return false, nil
	}
}

func _AssignPodPolicy_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*AssignPodPolicy)
	// policy
	switch x := m.Policy.(type) {
	case *AssignPodPolicy_NodePriority:
		s := proto.Size(x.NodePriority)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AssignPodPolicy_NodeSelector:
		s := proto.Size(x.NodeSelector)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *AssignPodPolicy_NodeName:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.NodeName)))
		n += len(x.NodeName)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*NodePriority)(nil), "containers_ai.alameda.v1alpha1.datahub.NodePriority")
	proto.RegisterType((*Selector)(nil), "containers_ai.alameda.v1alpha1.datahub.Selector")
	proto.RegisterMapType((map[string]string)(nil), "containers_ai.alameda.v1alpha1.datahub.Selector.SelectorEntry")
	proto.RegisterType((*AssignPodPolicy)(nil), "containers_ai.alameda.v1alpha1.datahub.AssignPodPolicy")
}

func init() {
	proto.RegisterFile("alameda_api/v1alpha1/datahub/pod_assignment.proto", fileDescriptor_pod_assignment_9ea0430d197b439a)
}

var fileDescriptor_pod_assignment_9ea0430d197b439a = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xcf, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0xd7, 0x6d, 0x8e, 0x2e, 0xdb, 0x50, 0x8a, 0x87, 0x32, 0x10, 0xc7, 0x10, 0xd9, 0x29,
	0x75, 0xd3, 0x83, 0x28, 0x08, 0x0a, 0xc2, 0x4e, 0x63, 0x54, 0x41, 0xd0, 0x43, 0x79, 0x5b, 0x9f,
	0x5b, 0xb0, 0x4d, 0x42, 0x9b, 0x0e, 0xfa, 0xdf, 0x08, 0xfe, 0xa3, 0x92, 0xf4, 0x07, 0xf3, 0x36,
	0x6f, 0x2f, 0xe9, 0x7b, 0x9f, 0xbe, 0xef, 0x27, 0x64, 0x0a, 0x11, 0xc4, 0x18, 0x42, 0x00, 0x92,
	0x79, 0xbb, 0x29, 0x44, 0x72, 0x0b, 0x53, 0x2f, 0x04, 0x05, 0xdb, 0x6c, 0xe5, 0x49, 0x11, 0x06,
	0x90, 0xa6, 0x6c, 0xc3, 0x63, 0xe4, 0x8a, 0xca, 0x44, 0x28, 0xe1, 0x5c, 0xae, 0x05, 0x57, 0xc0,
	0x38, 0x26, 0x69, 0x00, 0x8c, 0x96, 0x00, 0x5a, 0x0d, 0xd3, 0x72, 0x78, 0x78, 0xbe, 0x11, 0x62,
	0x13, 0xa1, 0x67, 0xa6, 0x56, 0xd9, 0xa7, 0xa7, 0x58, 0x8c, 0xa9, 0x82, 0x58, 0x16, 0xa0, 0xf1,
	0x05, 0xe9, 0x2f, 0x44, 0x88, 0xcb, 0x84, 0x89, 0x84, 0xa9, 0xdc, 0x39, 0x25, 0x47, 0x5c, 0x84,
	0x98, 0xba, 0xd6, 0xa8, 0x35, 0xe9, 0xfa, 0xc5, 0x61, 0xfc, 0x63, 0x11, 0xfb, 0x05, 0x23, 0x5c,
	0x2b, 0x91, 0x38, 0xef, 0xc4, 0x4e, 0xcb, 0xda, 0x74, 0xf5, 0x66, 0x0f, 0xf4, 0xb0, 0x75, 0x68,
	0xc5, 0xa8, 0x8b, 0x67, 0xae, 0x92, 0xdc, 0xaf, 0x79, 0xc3, 0x7b, 0x32, 0xf8, 0xf3, 0xc9, 0x39,
	0x21, 0xad, 0x2f, 0xcc, 0x5d, 0x6b, 0x64, 0x4d, 0xba, 0xbe, 0x2e, 0xf5, 0x86, 0x3b, 0x88, 0x32,
	0x74, 0x9b, 0xe6, 0xae, 0x38, 0xdc, 0x35, 0x6f, 0xad, 0xf1, 0x77, 0x93, 0x1c, 0x3f, 0x1a, 0x53,
	0x4b, 0x11, 0x2e, 0x45, 0xc4, 0xd6, 0xb9, 0x43, 0x49, 0x5b, 0x47, 0x36, 0x80, 0xde, 0x6c, 0x48,
	0x0b, 0x1f, 0xb4, 0xf2, 0x41, 0x5f, 0x2b, 0x1f, 0xbe, 0xe9, 0x73, 0x3e, 0xc8, 0x40, 0x47, 0x0e,
	0x64, 0x29, 0xc4, 0xfc, 0xa5, 0x37, 0xbb, 0x39, 0x34, 0xe1, 0xbe, 0xcc, 0x79, 0xc3, 0xef, 0xf3,
	0x7d, 0xb9, 0x6f, 0x25, 0xbc, 0xd6, 0xd7, 0x32, 0xf0, 0xab, 0xff, 0xea, 0xab, 0xc0, 0xf5, 0x93,
	0x9c, 0x91, 0xae, 0x01, 0x73, 0x88, 0xd1, 0x6d, 0x6b, 0x2f, 0xf3, 0x86, 0x6f, 0xeb, 0xab, 0x05,
	0xc4, 0xf8, 0x64, 0x93, 0x8e, 0x34, 0x3a, 0x56, 0x1d, 0x13, 0xfc, 0xfa, 0x37, 0x00, 0x00, 0xff,
	0xff, 0x08, 0xd8, 0xfb, 0x4e, 0x73, 0x02, 0x00, 0x00,
}
