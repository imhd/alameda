// Code generated by protoc-gen-go. DO NOT EDIT.
// source: alameda_api/v1alpha1/datahub/planning.proto

package containers_ai_alameda_v1alpha1_datahub

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PlanningType int32

const (
	PlanningType_PT_UNDEFINED      PlanningType = 0
	PlanningType_PT_RECOMMENDATION PlanningType = 1
	PlanningType_PT_PLANNING       PlanningType = 2
)

var PlanningType_name = map[int32]string{
	0: "PT_UNDEFINED",
	1: "PT_RECOMMENDATION",
	2: "PT_PLANNING",
}
var PlanningType_value = map[string]int32{
	"PT_UNDEFINED":      0,
	"PT_RECOMMENDATION": 1,
	"PT_PLANNING":       2,
}

func (x PlanningType) String() string {
	return proto.EnumName(PlanningType_name, int32(x))
}
func (PlanningType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_planning_8fe2f3e71d41f0ce, []int{0}
}

type ControllerPlanningType int32

const (
	ControllerPlanningType_CPT_UNDEFINED ControllerPlanningType = 0
	ControllerPlanningType_CPT_PRIMITIVE ControllerPlanningType = 1
	ControllerPlanningType_CPT_K8S       ControllerPlanningType = 2
)

var ControllerPlanningType_name = map[int32]string{
	0: "CPT_UNDEFINED",
	1: "CPT_PRIMITIVE",
	2: "CPT_K8S",
}
var ControllerPlanningType_value = map[string]int32{
	"CPT_UNDEFINED": 0,
	"CPT_PRIMITIVE": 1,
	"CPT_K8S":       2,
}

func (x ControllerPlanningType) String() string {
	return proto.EnumName(ControllerPlanningType_name, int32(x))
}
func (ControllerPlanningType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_planning_8fe2f3e71d41f0ce, []int{1}
}

type ContainerPlanning struct {
	Name                    string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LimitPlannings          []*MetricData `protobuf:"bytes,2,rep,name=limit_plannings,json=limitPlannings,proto3" json:"limit_plannings,omitempty"`
	RequestPlannings        []*MetricData `protobuf:"bytes,3,rep,name=request_plannings,json=requestPlannings,proto3" json:"request_plannings,omitempty"`
	InitialLimitPlannings   []*MetricData `protobuf:"bytes,4,rep,name=initial_limit_plannings,json=initialLimitPlannings,proto3" json:"initial_limit_plannings,omitempty"`
	InitialRequestPlannings []*MetricData `protobuf:"bytes,5,rep,name=initial_request_plannings,json=initialRequestPlannings,proto3" json:"initial_request_plannings,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}      `json:"-"`
	XXX_unrecognized        []byte        `json:"-"`
	XXX_sizecache           int32         `json:"-"`
}

func (m *ContainerPlanning) Reset()         { *m = ContainerPlanning{} }
func (m *ContainerPlanning) String() string { return proto.CompactTextString(m) }
func (*ContainerPlanning) ProtoMessage()    {}
func (*ContainerPlanning) Descriptor() ([]byte, []int) {
	return fileDescriptor_planning_8fe2f3e71d41f0ce, []int{0}
}
func (m *ContainerPlanning) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ContainerPlanning.Unmarshal(m, b)
}
func (m *ContainerPlanning) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ContainerPlanning.Marshal(b, m, deterministic)
}
func (dst *ContainerPlanning) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerPlanning.Merge(dst, src)
}
func (m *ContainerPlanning) XXX_Size() int {
	return xxx_messageInfo_ContainerPlanning.Size(m)
}
func (m *ContainerPlanning) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerPlanning.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerPlanning proto.InternalMessageInfo

func (m *ContainerPlanning) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ContainerPlanning) GetLimitPlannings() []*MetricData {
	if m != nil {
		return m.LimitPlannings
	}
	return nil
}

func (m *ContainerPlanning) GetRequestPlannings() []*MetricData {
	if m != nil {
		return m.RequestPlannings
	}
	return nil
}

func (m *ContainerPlanning) GetInitialLimitPlannings() []*MetricData {
	if m != nil {
		return m.InitialLimitPlannings
	}
	return nil
}

func (m *ContainerPlanning) GetInitialRequestPlannings() []*MetricData {
	if m != nil {
		return m.InitialRequestPlannings
	}
	return nil
}

type PodPlanning struct {
	PlanningType         PlanningType         `protobuf:"varint,1,opt,name=planning_type,json=planningType,proto3,enum=containers_ai.alameda.v1alpha1.datahub.PlanningType" json:"planning_type,omitempty"`
	NamespacedName       *NamespacedName      `protobuf:"bytes,2,opt,name=namespaced_name,json=namespacedName,proto3" json:"namespaced_name,omitempty"`
	ApplyPlanningNow     bool                 `protobuf:"varint,3,opt,name=apply_planning_now,json=applyPlanningNow,proto3" json:"apply_planning_now,omitempty"`
	AssignPodPolicy      *AssignPodPolicy     `protobuf:"bytes,4,opt,name=assign_pod_policy,json=assignPodPolicy,proto3" json:"assign_pod_policy,omitempty"`
	ContainerPlannings   []*ContainerPlanning `protobuf:"bytes,5,rep,name=container_plannings,json=containerPlannings,proto3" json:"container_plannings,omitempty"`
	StartTime            *timestamp.Timestamp `protobuf:"bytes,6,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime              *timestamp.Timestamp `protobuf:"bytes,7,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	TopController        *TopController       `protobuf:"bytes,8,opt,name=top_controller,json=topController,proto3" json:"top_controller,omitempty"`
	PlanningId           string               `protobuf:"bytes,9,opt,name=planning_id,json=planningId,proto3" json:"planning_id,omitempty"`
	TotalCost            float64              `protobuf:"fixed64,10,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PodPlanning) Reset()         { *m = PodPlanning{} }
func (m *PodPlanning) String() string { return proto.CompactTextString(m) }
func (*PodPlanning) ProtoMessage()    {}
func (*PodPlanning) Descriptor() ([]byte, []int) {
	return fileDescriptor_planning_8fe2f3e71d41f0ce, []int{1}
}
func (m *PodPlanning) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PodPlanning.Unmarshal(m, b)
}
func (m *PodPlanning) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PodPlanning.Marshal(b, m, deterministic)
}
func (dst *PodPlanning) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PodPlanning.Merge(dst, src)
}
func (m *PodPlanning) XXX_Size() int {
	return xxx_messageInfo_PodPlanning.Size(m)
}
func (m *PodPlanning) XXX_DiscardUnknown() {
	xxx_messageInfo_PodPlanning.DiscardUnknown(m)
}

var xxx_messageInfo_PodPlanning proto.InternalMessageInfo

func (m *PodPlanning) GetPlanningType() PlanningType {
	if m != nil {
		return m.PlanningType
	}
	return PlanningType_PT_UNDEFINED
}

func (m *PodPlanning) GetNamespacedName() *NamespacedName {
	if m != nil {
		return m.NamespacedName
	}
	return nil
}

func (m *PodPlanning) GetApplyPlanningNow() bool {
	if m != nil {
		return m.ApplyPlanningNow
	}
	return false
}

func (m *PodPlanning) GetAssignPodPolicy() *AssignPodPolicy {
	if m != nil {
		return m.AssignPodPolicy
	}
	return nil
}

func (m *PodPlanning) GetContainerPlannings() []*ContainerPlanning {
	if m != nil {
		return m.ContainerPlannings
	}
	return nil
}

func (m *PodPlanning) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *PodPlanning) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *PodPlanning) GetTopController() *TopController {
	if m != nil {
		return m.TopController
	}
	return nil
}

func (m *PodPlanning) GetPlanningId() string {
	if m != nil {
		return m.PlanningId
	}
	return ""
}

func (m *PodPlanning) GetTotalCost() float64 {
	if m != nil {
		return m.TotalCost
	}
	return 0
}

type ControllerPlanning struct {
	PlanningType         PlanningType               `protobuf:"varint,1,opt,name=planning_type,json=planningType,proto3,enum=containers_ai.alameda.v1alpha1.datahub.PlanningType" json:"planning_type,omitempty"`
	CtlPlanningType      ControllerPlanningType     `protobuf:"varint,2,opt,name=ctl_planning_type,json=ctlPlanningType,proto3,enum=containers_ai.alameda.v1alpha1.datahub.ControllerPlanningType" json:"ctl_planning_type,omitempty"`
	CtlPlanningSpec      *ControllerPlanningSpec    `protobuf:"bytes,3,opt,name=ctl_planning_spec,json=ctlPlanningSpec,proto3" json:"ctl_planning_spec,omitempty"`
	CtlPlanningSpecK8S   *ControllerPlanningSpecK8S `protobuf:"bytes,4,opt,name=ctl_planning_spec_k8s,json=ctlPlanningSpecK8s,proto3" json:"ctl_planning_spec_k8s,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *ControllerPlanning) Reset()         { *m = ControllerPlanning{} }
func (m *ControllerPlanning) String() string { return proto.CompactTextString(m) }
func (*ControllerPlanning) ProtoMessage()    {}
func (*ControllerPlanning) Descriptor() ([]byte, []int) {
	return fileDescriptor_planning_8fe2f3e71d41f0ce, []int{2}
}
func (m *ControllerPlanning) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerPlanning.Unmarshal(m, b)
}
func (m *ControllerPlanning) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerPlanning.Marshal(b, m, deterministic)
}
func (dst *ControllerPlanning) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerPlanning.Merge(dst, src)
}
func (m *ControllerPlanning) XXX_Size() int {
	return xxx_messageInfo_ControllerPlanning.Size(m)
}
func (m *ControllerPlanning) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerPlanning.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerPlanning proto.InternalMessageInfo

func (m *ControllerPlanning) GetPlanningType() PlanningType {
	if m != nil {
		return m.PlanningType
	}
	return PlanningType_PT_UNDEFINED
}

func (m *ControllerPlanning) GetCtlPlanningType() ControllerPlanningType {
	if m != nil {
		return m.CtlPlanningType
	}
	return ControllerPlanningType_CPT_UNDEFINED
}

func (m *ControllerPlanning) GetCtlPlanningSpec() *ControllerPlanningSpec {
	if m != nil {
		return m.CtlPlanningSpec
	}
	return nil
}

func (m *ControllerPlanning) GetCtlPlanningSpecK8S() *ControllerPlanningSpecK8S {
	if m != nil {
		return m.CtlPlanningSpecK8S
	}
	return nil
}

type ControllerPlanningSpec struct {
	NamespacedName       *NamespacedName      `protobuf:"bytes,1,opt,name=namespaced_name,json=namespacedName,proto3" json:"namespaced_name,omitempty"`
	Kind                 Kind                 `protobuf:"varint,2,opt,name=kind,proto3,enum=containers_ai.alameda.v1alpha1.datahub.Kind" json:"kind,omitempty"`
	CurrentReplicas      int32                `protobuf:"varint,3,opt,name=current_replicas,json=currentReplicas,proto3" json:"current_replicas,omitempty"`
	DesiredReplicas      int32                `protobuf:"varint,4,opt,name=desired_replicas,json=desiredReplicas,proto3" json:"desired_replicas,omitempty"`
	Time                 *timestamp.Timestamp `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	CreateTime           *timestamp.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	CurrentCpuRequests   float64              `protobuf:"fixed64,7,opt,name=current_cpu_requests,json=currentCpuRequests,proto3" json:"current_cpu_requests,omitempty"`
	CurrentMemRequests   float64              `protobuf:"fixed64,8,opt,name=current_mem_requests,json=currentMemRequests,proto3" json:"current_mem_requests,omitempty"`
	CurrentCpuLimits     float64              `protobuf:"fixed64,9,opt,name=current_cpu_limits,json=currentCpuLimits,proto3" json:"current_cpu_limits,omitempty"`
	CurrentMemLimits     float64              `protobuf:"fixed64,10,opt,name=current_mem_limits,json=currentMemLimits,proto3" json:"current_mem_limits,omitempty"`
	DesiredCpuLimits     float64              `protobuf:"fixed64,11,opt,name=desired_cpu_limits,json=desiredCpuLimits,proto3" json:"desired_cpu_limits,omitempty"`
	DesiredMemLimits     float64              `protobuf:"fixed64,12,opt,name=desired_mem_limits,json=desiredMemLimits,proto3" json:"desired_mem_limits,omitempty"`
	TotalCost            float64              `protobuf:"fixed64,13,opt,name=total_cost,json=totalCost,proto3" json:"total_cost,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ControllerPlanningSpec) Reset()         { *m = ControllerPlanningSpec{} }
func (m *ControllerPlanningSpec) String() string { return proto.CompactTextString(m) }
func (*ControllerPlanningSpec) ProtoMessage()    {}
func (*ControllerPlanningSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_planning_8fe2f3e71d41f0ce, []int{3}
}
func (m *ControllerPlanningSpec) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerPlanningSpec.Unmarshal(m, b)
}
func (m *ControllerPlanningSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerPlanningSpec.Marshal(b, m, deterministic)
}
func (dst *ControllerPlanningSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerPlanningSpec.Merge(dst, src)
}
func (m *ControllerPlanningSpec) XXX_Size() int {
	return xxx_messageInfo_ControllerPlanningSpec.Size(m)
}
func (m *ControllerPlanningSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerPlanningSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerPlanningSpec proto.InternalMessageInfo

func (m *ControllerPlanningSpec) GetNamespacedName() *NamespacedName {
	if m != nil {
		return m.NamespacedName
	}
	return nil
}

func (m *ControllerPlanningSpec) GetKind() Kind {
	if m != nil {
		return m.Kind
	}
	return Kind_POD
}

func (m *ControllerPlanningSpec) GetCurrentReplicas() int32 {
	if m != nil {
		return m.CurrentReplicas
	}
	return 0
}

func (m *ControllerPlanningSpec) GetDesiredReplicas() int32 {
	if m != nil {
		return m.DesiredReplicas
	}
	return 0
}

func (m *ControllerPlanningSpec) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *ControllerPlanningSpec) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func (m *ControllerPlanningSpec) GetCurrentCpuRequests() float64 {
	if m != nil {
		return m.CurrentCpuRequests
	}
	return 0
}

func (m *ControllerPlanningSpec) GetCurrentMemRequests() float64 {
	if m != nil {
		return m.CurrentMemRequests
	}
	return 0
}

func (m *ControllerPlanningSpec) GetCurrentCpuLimits() float64 {
	if m != nil {
		return m.CurrentCpuLimits
	}
	return 0
}

func (m *ControllerPlanningSpec) GetCurrentMemLimits() float64 {
	if m != nil {
		return m.CurrentMemLimits
	}
	return 0
}

func (m *ControllerPlanningSpec) GetDesiredCpuLimits() float64 {
	if m != nil {
		return m.DesiredCpuLimits
	}
	return 0
}

func (m *ControllerPlanningSpec) GetDesiredMemLimits() float64 {
	if m != nil {
		return m.DesiredMemLimits
	}
	return 0
}

func (m *ControllerPlanningSpec) GetTotalCost() float64 {
	if m != nil {
		return m.TotalCost
	}
	return 0
}

type ControllerPlanningSpecK8S struct {
	NamespacedName       *NamespacedName      `protobuf:"bytes,1,opt,name=namespaced_name,json=namespacedName,proto3" json:"namespaced_name,omitempty"`
	Kind                 Kind                 `protobuf:"varint,2,opt,name=kind,proto3,enum=containers_ai.alameda.v1alpha1.datahub.Kind" json:"kind,omitempty"`
	CurrentReplicas      int32                `protobuf:"varint,3,opt,name=current_replicas,json=currentReplicas,proto3" json:"current_replicas,omitempty"`
	DesiredReplicas      int32                `protobuf:"varint,4,opt,name=desired_replicas,json=desiredReplicas,proto3" json:"desired_replicas,omitempty"`
	Time                 *timestamp.Timestamp `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	CreateTime           *timestamp.Timestamp `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ControllerPlanningSpecK8S) Reset()         { *m = ControllerPlanningSpecK8S{} }
func (m *ControllerPlanningSpecK8S) String() string { return proto.CompactTextString(m) }
func (*ControllerPlanningSpecK8S) ProtoMessage()    {}
func (*ControllerPlanningSpecK8S) Descriptor() ([]byte, []int) {
	return fileDescriptor_planning_8fe2f3e71d41f0ce, []int{4}
}
func (m *ControllerPlanningSpecK8S) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ControllerPlanningSpecK8S.Unmarshal(m, b)
}
func (m *ControllerPlanningSpecK8S) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ControllerPlanningSpecK8S.Marshal(b, m, deterministic)
}
func (dst *ControllerPlanningSpecK8S) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ControllerPlanningSpecK8S.Merge(dst, src)
}
func (m *ControllerPlanningSpecK8S) XXX_Size() int {
	return xxx_messageInfo_ControllerPlanningSpecK8S.Size(m)
}
func (m *ControllerPlanningSpecK8S) XXX_DiscardUnknown() {
	xxx_messageInfo_ControllerPlanningSpecK8S.DiscardUnknown(m)
}

var xxx_messageInfo_ControllerPlanningSpecK8S proto.InternalMessageInfo

func (m *ControllerPlanningSpecK8S) GetNamespacedName() *NamespacedName {
	if m != nil {
		return m.NamespacedName
	}
	return nil
}

func (m *ControllerPlanningSpecK8S) GetKind() Kind {
	if m != nil {
		return m.Kind
	}
	return Kind_POD
}

func (m *ControllerPlanningSpecK8S) GetCurrentReplicas() int32 {
	if m != nil {
		return m.CurrentReplicas
	}
	return 0
}

func (m *ControllerPlanningSpecK8S) GetDesiredReplicas() int32 {
	if m != nil {
		return m.DesiredReplicas
	}
	return 0
}

func (m *ControllerPlanningSpecK8S) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *ControllerPlanningSpecK8S) GetCreateTime() *timestamp.Timestamp {
	if m != nil {
		return m.CreateTime
	}
	return nil
}

func init() {
	proto.RegisterType((*ContainerPlanning)(nil), "containers_ai.alameda.v1alpha1.datahub.ContainerPlanning")
	proto.RegisterType((*PodPlanning)(nil), "containers_ai.alameda.v1alpha1.datahub.PodPlanning")
	proto.RegisterType((*ControllerPlanning)(nil), "containers_ai.alameda.v1alpha1.datahub.ControllerPlanning")
	proto.RegisterType((*ControllerPlanningSpec)(nil), "containers_ai.alameda.v1alpha1.datahub.ControllerPlanningSpec")
	proto.RegisterType((*ControllerPlanningSpecK8S)(nil), "containers_ai.alameda.v1alpha1.datahub.ControllerPlanningSpecK8s")
	proto.RegisterEnum("containers_ai.alameda.v1alpha1.datahub.PlanningType", PlanningType_name, PlanningType_value)
	proto.RegisterEnum("containers_ai.alameda.v1alpha1.datahub.ControllerPlanningType", ControllerPlanningType_name, ControllerPlanningType_value)
}

func init() {
	proto.RegisterFile("alameda_api/v1alpha1/datahub/planning.proto", fileDescriptor_planning_8fe2f3e71d41f0ce)
}

var fileDescriptor_planning_8fe2f3e71d41f0ce = []byte{
	// 916 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0x67, 0x63, 0xbb, 0x49, 0xde, 0x26, 0xf1, 0x7a, 0x20, 0xe0, 0x46, 0x42, 0xb5, 0x72, 0x40,
	0x6e, 0x89, 0xd6, 0x24, 0x50, 0x48, 0x85, 0x84, 0x88, 0x1c, 0x03, 0x96, 0xeb, 0xad, 0x35, 0x35,
	0x48, 0x08, 0xa4, 0xd1, 0x64, 0x77, 0x48, 0x27, 0xdd, 0x3f, 0xc3, 0xce, 0x98, 0x2a, 0x47, 0x3e,
	0x16, 0x07, 0x0e, 0x7c, 0x0b, 0x3e, 0x0e, 0xda, 0xd9, 0x59, 0xdb, 0xeb, 0x84, 0x64, 0x49, 0x51,
	0x4f, 0xbd, 0xed, 0xbc, 0xfd, 0xfd, 0x99, 0x37, 0xf3, 0xde, 0x1b, 0xf8, 0x98, 0x86, 0x34, 0x62,
	0x01, 0x25, 0x54, 0xf0, 0xde, 0x6f, 0x87, 0x34, 0x14, 0x2f, 0xe8, 0x61, 0x2f, 0xa0, 0x8a, 0xbe,
	0x98, 0x9d, 0xf5, 0x44, 0x48, 0xe3, 0x98, 0xc7, 0xe7, 0xae, 0x48, 0x13, 0x95, 0xa0, 0x8f, 0xfc,
	0x24, 0x56, 0x94, 0xc7, 0x2c, 0x95, 0x84, 0x72, 0xd7, 0x50, 0xdd, 0x82, 0xe6, 0x1a, 0xda, 0xde,
	0x83, 0xf3, 0x24, 0x39, 0x0f, 0x59, 0x4f, 0xb3, 0xce, 0x66, 0xbf, 0xf4, 0x14, 0x8f, 0x98, 0x54,
	0x34, 0x12, 0xb9, 0xd0, 0xde, 0xcd, 0xae, 0x11, 0x53, 0x34, 0xfb, 0x36, 0xe0, 0x87, 0xb7, 0x81,
	0x53, 0xee, 0x1b, 0xe8, 0xe1, 0xcd, 0xd9, 0x24, 0x01, 0xa1, 0x52, 0xf2, 0xf3, 0x38, 0x62, 0xb1,
	0xaa, 0xb4, 0x95, 0x94, 0xc9, 0x64, 0x96, 0xfa, 0x2c, 0x07, 0xef, 0xff, 0x55, 0x83, 0x56, 0xbf,
	0x38, 0x83, 0x89, 0x39, 0x1c, 0x84, 0xa0, 0x1e, 0xd3, 0x88, 0xb5, 0xad, 0x8e, 0xd5, 0xdd, 0xc4,
	0xfa, 0x1b, 0xfd, 0x04, 0xcd, 0x90, 0x47, 0x5c, 0x91, 0xe2, 0x08, 0x65, 0x7b, 0xad, 0x53, 0xeb,
	0xda, 0x47, 0x47, 0x6e, 0xb5, 0x43, 0x74, 0xc7, 0x3a, 0xb1, 0x53, 0xaa, 0x28, 0xde, 0xd1, 0x52,
	0x85, 0x9f, 0x44, 0x04, 0x5a, 0x29, 0xfb, 0x75, 0xc6, 0xe4, 0xb2, 0x7c, 0xed, 0xce, 0xf2, 0x8e,
	0x11, 0x5b, 0x18, 0x5c, 0xc0, 0x07, 0x3c, 0xe6, 0x8a, 0xd3, 0x90, 0xac, 0x66, 0x51, 0xbf, 0xb3,
	0xcd, 0xae, 0x91, 0x7c, 0x5a, 0x4e, 0x26, 0x86, 0xfb, 0x85, 0xd7, 0xd5, 0xa4, 0x1a, 0x77, 0x76,
	0x2b, 0x12, 0xc0, 0x2b, 0xb9, 0xed, 0xff, 0xdd, 0x00, 0x7b, 0x92, 0x04, 0xf3, 0xdb, 0xfb, 0x11,
	0xb6, 0x0b, 0x3f, 0xa2, 0x2e, 0x45, 0x7e, 0x8d, 0x3b, 0x47, 0x9f, 0x55, 0xf5, 0x2c, 0x84, 0xa6,
	0x97, 0x82, 0xe1, 0x2d, 0xb1, 0xb4, 0x42, 0x04, 0x9a, 0x59, 0x31, 0x48, 0x41, 0x7d, 0x16, 0x10,
	0x5d, 0x23, 0x6b, 0x1d, 0xab, 0x6b, 0x1f, 0x7d, 0x5e, 0x55, 0xdc, 0x9b, 0xd3, 0xb3, 0x2f, 0xbc,
	0x13, 0x97, 0xd6, 0xe8, 0x00, 0x10, 0x15, 0x22, 0xbc, 0x9c, 0x9f, 0x18, 0x89, 0x93, 0x57, 0xed,
	0x5a, 0xc7, 0xea, 0x6e, 0x60, 0x47, 0xff, 0x29, 0x76, 0xe7, 0x25, 0xaf, 0x90, 0x0f, 0xad, 0xbc,
	0xfc, 0x49, 0xd6, 0x09, 0x22, 0x09, 0xb9, 0x7f, 0xd9, 0xae, 0xeb, 0x0d, 0x7d, 0x51, 0x75, 0x43,
	0x27, 0x5a, 0x20, 0x3b, 0x3f, 0x4d, 0xc7, 0x4d, 0x5a, 0x0e, 0xa0, 0x0b, 0x78, 0x77, 0x2e, 0x75,
	0xe5, 0x22, 0x9f, 0x54, 0xb5, 0xb9, 0xd2, 0x64, 0x18, 0xf9, 0xab, 0x21, 0x89, 0x9e, 0x00, 0x48,
	0x45, 0x53, 0x45, 0xb2, 0xf9, 0xd2, 0xbe, 0xa7, 0x33, 0xd9, 0x73, 0xf3, 0xe1, 0xe3, 0x16, 0xc3,
	0xc7, 0x9d, 0x16, 0xc3, 0x07, 0x6f, 0x6a, 0x74, 0xb6, 0x46, 0x8f, 0x61, 0x83, 0xc5, 0x41, 0x4e,
	0x5c, 0xbf, 0x95, 0xb8, 0xce, 0xe2, 0x40, 0xd3, 0x7e, 0x86, 0x1d, 0x95, 0x08, 0x92, 0xed, 0x25,
	0x4d, 0xc2, 0x90, 0xa5, 0xed, 0x0d, 0x4d, 0x7e, 0x5c, 0x35, 0xb1, 0x69, 0x22, 0xfa, 0x73, 0x32,
	0xde, 0x56, 0xcb, 0x4b, 0xf4, 0x00, 0xec, 0xf9, 0x45, 0xf2, 0xa0, 0xbd, 0xa9, 0xe7, 0x09, 0x14,
	0xa1, 0x61, 0x80, 0x3e, 0x04, 0x50, 0x89, 0xa2, 0x21, 0xf1, 0x13, 0xa9, 0xda, 0xd0, 0xb1, 0xba,
	0x16, 0xde, 0xd4, 0x91, 0x7e, 0x22, 0xd5, 0xfe, 0x9f, 0x35, 0x40, 0x0b, 0xb9, 0x37, 0x51, 0xe1,
	0x17, 0xd0, 0xf2, 0x55, 0x48, 0xca, 0xf2, 0x6b, 0x5a, 0xfe, 0xab, 0xff, 0x72, 0xd7, 0xe5, 0x1d,
	0x6b, 0xa3, 0xa6, 0xaf, 0xc2, 0xc9, 0x4d, 0x5e, 0x52, 0x30, 0x5f, 0xd7, 0xba, 0xfd, 0x3a, 0x5e,
	0xcf, 0x05, 0xf3, 0x4b, 0x5e, 0x59, 0x00, 0x29, 0xd8, 0xbd, 0xe2, 0x45, 0x5e, 0x1e, 0x4b, 0xd3,
	0x2e, 0x27, 0xaf, 0xe7, 0x37, 0x3a, 0x96, 0x18, 0xad, 0x58, 0x8e, 0x8e, 0xe5, 0xfe, 0x1f, 0x0d,
	0x78, 0xff, 0x7a, 0xc6, 0x75, 0xa3, 0xc4, 0xfa, 0x5f, 0x47, 0xc9, 0xd7, 0x50, 0x7f, 0xc9, 0xe3,
	0xc0, 0x5c, 0xde, 0x41, 0x55, 0xd5, 0x11, 0x8f, 0x03, 0xac, 0x99, 0xe8, 0x21, 0x38, 0xfe, 0x2c,
	0x4d, 0x59, 0xac, 0x48, 0xca, 0x44, 0xc8, 0x7d, 0x2a, 0xf5, 0xf5, 0x34, 0x70, 0xd3, 0xc4, 0xb1,
	0x09, 0x67, 0xd0, 0x80, 0x49, 0x9e, 0xb2, 0x60, 0x01, 0xad, 0xe7, 0x50, 0x13, 0x9f, 0x43, 0x5d,
	0xa8, 0xeb, 0x26, 0x6d, 0xdc, 0xda, 0xa4, 0x1a, 0x87, 0xbe, 0x04, 0xdb, 0x4f, 0x19, 0x55, 0xac,
	0xea, 0x50, 0x80, 0x1c, 0xae, 0xdb, 0xfb, 0x13, 0x78, 0xaf, 0x48, 0xc1, 0x17, 0xb3, 0xe2, 0x3d,
	0x92, 0x7a, 0x42, 0x58, 0x18, 0x99, 0x7f, 0x7d, 0x31, 0x33, 0xaf, 0x8a, 0x5c, 0x66, 0x44, 0x2c,
	0x5a, 0x30, 0x36, 0x4a, 0x8c, 0x31, 0x8b, 0xe6, 0x8c, 0x03, 0x40, 0xcb, 0x1e, 0xfa, 0x7d, 0x95,
	0xba, 0xd7, 0x2d, 0xec, 0x2c, 0x1c, 0xf4, 0x2b, 0x59, 0x42, 0x67, 0xfa, 0x06, 0x0d, 0x25, 0xf4,
	0x98, 0x45, 0x0b, 0x74, 0x71, 0xae, 0x4b, 0xda, 0x76, 0x8e, 0x36, 0x7f, 0x4a, 0xda, 0x05, 0x7a,
	0x49, 0x7b, 0xab, 0x84, 0x5e, 0x68, 0x97, 0x67, 0xcf, 0xf6, 0xea, 0xec, 0xf9, 0xbd, 0x06, 0xf7,
	0xff, 0xb5, 0xda, 0xdf, 0x96, 0xef, 0x9b, 0x28, 0xdf, 0x47, 0xdf, 0xc1, 0x56, 0x69, 0x62, 0x3a,
	0xb0, 0x35, 0x99, 0x92, 0xef, 0xbd, 0xd3, 0xc1, 0x37, 0x43, 0x6f, 0x70, 0xea, 0xbc, 0x83, 0x76,
	0xa1, 0x35, 0x99, 0x12, 0x3c, 0xe8, 0x3f, 0x1b, 0x8f, 0x07, 0xde, 0xe9, 0xc9, 0x74, 0xf8, 0xcc,
	0x73, 0x2c, 0xd4, 0x04, 0x7b, 0x32, 0x25, 0x93, 0xa7, 0x27, 0x9e, 0x37, 0xf4, 0xbe, 0x75, 0xd6,
	0x1e, 0x8d, 0xae, 0x1b, 0x44, 0x5a, 0xb3, 0x05, 0xdb, 0xfd, 0x15, 0x51, 0x13, 0x9a, 0xe0, 0xe1,
	0x78, 0x38, 0x1d, 0xfe, 0x30, 0x70, 0x2c, 0x64, 0xc3, 0x7a, 0x16, 0x1a, 0x1d, 0x3f, 0x77, 0xd6,
	0xce, 0xee, 0xe9, 0x6d, 0x7f, 0xfa, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x24, 0x31, 0x9c, 0xc6,
	0x6c, 0x0c, 0x00, 0x00,
}
